#include<cstdio>
#include<cstdlib>
#include<string>
#include<iostream>
using namespace std;

struct Node{
    int key;
    Node *right, *left, *parent;
};
Node *root, *NIL;

//************搜索***************//
Node * find(Node *u,int k){
    while (u!= NIL && k!= u->key)
    {
        if(k < u->key)
            u = u->left;
        else
            u = u->right;
    }
    return u;
}

//*************插入*******************//
void insert(int k){
    Node *y = NIL;
    Node *x = root;
    Node *z;

    z = (Node *)malloc(sizeof(Node));
    z->key = k;
    z->right = NIL;
    z->left = NIL;

    while (x != NIL)
    {
        y = x;
        if(z->key < x->key)
            x = x->left;
        else
            x = x->right;
    }

    z->parent = y;
    if(y == NIL)
        root = z;
    else{
        if(z->key < y->key)
            y->left = z;
        else
            y->right = z;
    }
}

//***************删除*******************//
Node * treeMinimum(Node *x){
    while(x->left = NIL)
        x = x->left;
    return x;
}
Node * treeSuccessor(Node *x){
    if(x->left != NIL)
        return treeMinimum(x->right);
    Node *y = x->parent;
    while (y!=NIL && x == y->right)
    {
        x = y;
        y = y->parent;
    }
    return y;
}
void treeDelete(Node *z){
    Node *y;     ///要删除的对象
    Node *x;    //y的子节点
    //确定要删除的节点
    if(z->left == NIL || z->right == NIL)
        y = z;
    else
        y = treeSuccessor(z);
    //确定y的子节点x
    if(y->left != NIL)
        x = y->left;
    else
        x = y->right;
    
    if(x != NIL)
        x->parent = y->parent;
    if(y->parent == NIL)
        root = x;
    else{
        if(y == y->parent->left)
            y->parent->left = x;
        else
            y->parent->right = x;
    }

    if(y != z)
        z->key = y->key;
    
    free(y);
}


//*******中序遍历**************//
void inorder(Node *u){
    if(u == NIL)    return;
    inorder(u->left);
    printf(" %d ",u->key);
    inorder(u->right);
}

//*******前序遍历*************//
void preorder(Node *u){
    if(u == NIL) return;
    printf(" %d ",u->key);
    preorder(u->left);
    preorder(u->right);
}

//********后序遍历**************//
void  postorder(Node *u){
    if(u == NIL) return;
    postorder(u->left);
    postorder(u->right);
    printf(" %d ",u->key);
}
 

int main(){
    int n,x;
    string com;
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        cin >> com;
        if (com[0] == 'f')
        {
            scanf("%d",&x);
            Node *t = find(root, x);
            if(t != NIL)
                cout << "yes" <<endl;
            else
                cout << "no" <<endl;
        }else if(com == "insert"){
            scanf("%d",&x);
            insert(x);
        }else if(com == "print"){
            inorder(root);
            cout<<endl;
            preorder(root);
            cout<<endl;
            postorder(root);
            cout<<endl;
        }else if(com == "delete"){
            scanf("%d",&x);
            treeDelete(find(root,x));
        }  
    }
    return 0;
}  
