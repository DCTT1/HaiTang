//使用C++实现DFS，非递归的方式，利用栈，利用队列//

//利用栈//
#include<iostream>
#include<stack>
#include<queue>

using namespace std;

int visitedDFS[5] = {0};
int count_DFS = 0;

//DFS的非递归实现，利用栈来实现
void DFS(int startNum, int mat[][5]) {
    stack<int> s;       //初始化一个栈用来存储序号
    s.push(startNum);       //初始序号入栈
    int flag[5] = {0};      //设置一个数组来判断序号是否已经被遍历
    flag[startNum-1] = 1;
    cout << startNum << " ";

    while (! s.empty())
    {
        int currentNum = s.top();
        int i;
        //循环遍历当前序号的相邻序号，如果未被访问则插入栈中
        for (int i = 0; i < 5; i++)
        {
            count_DFS ++;
            if(mat[currentNum - 1][i] == 1 && flag[i] == 0){
                s.push(i+1);
                flag[i] = 1;
                cout << i+1 << " ";
                break;
            }
        }
        //判断当前序号是否有相邻未被访问的结点，有则跳过，无则栈顶元素出站
        if(i == 5)
            s.pop();
        return;
    }
    
}

int main(){
    int matrix[5][5] = {
        {0,1,0,1,1},
        {1,0,1,1,0},
        {0,1,0,1,0},
        {1,1,1,0,0},
        {1,0,0,0,0}
    }

    cout << "设置输入矩阵如下: " << endl;
    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; i < 5; j++)
            cout << matrix[i][j] << endl;
        cout << endl;
    }
    
    cout << "深度优先搜索的非递归实现: " << endl;
    DFS(1, matrix);
    return 0;
}

//利用队列//
#include<iostream>
#include<stack>
#include<queue>
#include<cstring>
#define MAX 100

using namespace std;

queue<int> DFS_Queue;
int G[MAX][MAX];
int visit[MAX];
int V,E;
void DFS(int s){
    cout << "DFS" << endl;
    int node;
    memset(visit, 0, sizeof(visit));
    DFS_Queue.push(s);      //顶点入队列

    while (! DFS_Queue.empty())
    {
        node = DFS_Queue.front();   //取头元素
        DFS_Queue.pop();
        if(visit[node])     continue;
        visit[node] = 1;
        cout << node << "--" ;

        //遍历，只要有未被访问的就入队列
        for(int i=0;i<V;i++)
            if(G[i][node])
                DFS_Queue.push(i);
        for(int j=0;j<V;j++)
            if(G[node][j])
                DFS_Queue.push(j);
    }
    cout << "NULL" << endl;
}

int main(){
    memset(visit,0, sizeof(visit));
    memset(G,0, sizeof(G));
    G[0][1] = 1;
    G[1][2] = 1;
    G[1][3] = 1;
    G[3][5] = 1;
    G[3][4] = 1;
    G[3][7] = 1;
    G[4][6] = 1;
    G[7][4] = 1;
    V = 8;
    DFS(0);
    cout << endl;
    return  0;
}
